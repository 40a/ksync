// Code generated by protoc-gen-go. DO NOT EDIT.
// source: proto/radar.proto

package proto_ksync

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import google_protobuf "github.com/golang/protobuf/ptypes/empty"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type ContainerPath struct {
	ContainerId string `protobuf:"bytes,1,opt,name=container_id,json=containerId" json:"container_id,omitempty"`
}

func (m *ContainerPath) Reset()                    { *m = ContainerPath{} }
func (m *ContainerPath) String() string            { return proto.CompactTextString(m) }
func (*ContainerPath) ProtoMessage()               {}
func (*ContainerPath) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{0} }

func (m *ContainerPath) GetContainerId() string {
	if m != nil {
		return m.ContainerId
	}
	return ""
}

type BasePath struct {
	Full string `protobuf:"bytes,1,opt,name=full" json:"full,omitempty"`
}

func (m *BasePath) Reset()                    { *m = BasePath{} }
func (m *BasePath) String() string            { return proto.CompactTextString(m) }
func (*BasePath) ProtoMessage()               {}
func (*BasePath) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{1} }

func (m *BasePath) GetFull() string {
	if m != nil {
		return m.Full
	}
	return ""
}

type Error struct {
	Msg string `protobuf:"bytes,1,opt,name=msg" json:"msg,omitempty"`
}

func (m *Error) Reset()                    { *m = Error{} }
func (m *Error) String() string            { return proto.CompactTextString(m) }
func (*Error) ProtoMessage()               {}
func (*Error) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{2} }

func (m *Error) GetMsg() string {
	if m != nil {
		return m.Msg
	}
	return ""
}

type VersionInfo struct {
	Version   string `protobuf:"bytes,1,opt,name=Version,json=version" json:"Version,omitempty"`
	GoVersion string `protobuf:"bytes,2,opt,name=GoVersion,json=goVersion" json:"GoVersion,omitempty"`
	GitCommit string `protobuf:"bytes,3,opt,name=GitCommit,json=gitCommit" json:"GitCommit,omitempty"`
	GitTag    string `protobuf:"bytes,4,opt,name=GitTag,json=gitTag" json:"GitTag,omitempty"`
	BuildDate string `protobuf:"bytes,5,opt,name=BuildDate,json=buildDate" json:"BuildDate,omitempty"`
}

func (m *VersionInfo) Reset()                    { *m = VersionInfo{} }
func (m *VersionInfo) String() string            { return proto.CompactTextString(m) }
func (*VersionInfo) ProtoMessage()               {}
func (*VersionInfo) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{3} }

func (m *VersionInfo) GetVersion() string {
	if m != nil {
		return m.Version
	}
	return ""
}

func (m *VersionInfo) GetGoVersion() string {
	if m != nil {
		return m.GoVersion
	}
	return ""
}

func (m *VersionInfo) GetGitCommit() string {
	if m != nil {
		return m.GitCommit
	}
	return ""
}

func (m *VersionInfo) GetGitTag() string {
	if m != nil {
		return m.GitTag
	}
	return ""
}

func (m *VersionInfo) GetBuildDate() string {
	if m != nil {
		return m.BuildDate
	}
	return ""
}

type DockerVersion struct {
	Version       string `protobuf:"bytes,1,opt,name=Version,json=version" json:"Version,omitempty"`
	APIVersion    string `protobuf:"bytes,2,opt,name=APIVersion,json=aPIVersion" json:"APIVersion,omitempty"`
	MinAPIVersion string `protobuf:"bytes,3,opt,name=MinAPIVersion,json=minAPIVersion" json:"MinAPIVersion,omitempty"`
	GitCommit     string `protobuf:"bytes,4,opt,name=GitCommit,json=gitCommit" json:"GitCommit,omitempty"`
	GoVersion     string `protobuf:"bytes,5,opt,name=GoVersion,json=goVersion" json:"GoVersion,omitempty"`
	Os            string `protobuf:"bytes,6,opt,name=Os,json=os" json:"Os,omitempty"`
	Arch          string `protobuf:"bytes,7,opt,name=Arch,json=arch" json:"Arch,omitempty"`
}

func (m *DockerVersion) Reset()                    { *m = DockerVersion{} }
func (m *DockerVersion) String() string            { return proto.CompactTextString(m) }
func (*DockerVersion) ProtoMessage()               {}
func (*DockerVersion) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{4} }

func (m *DockerVersion) GetVersion() string {
	if m != nil {
		return m.Version
	}
	return ""
}

func (m *DockerVersion) GetAPIVersion() string {
	if m != nil {
		return m.APIVersion
	}
	return ""
}

func (m *DockerVersion) GetMinAPIVersion() string {
	if m != nil {
		return m.MinAPIVersion
	}
	return ""
}

func (m *DockerVersion) GetGitCommit() string {
	if m != nil {
		return m.GitCommit
	}
	return ""
}

func (m *DockerVersion) GetGoVersion() string {
	if m != nil {
		return m.GoVersion
	}
	return ""
}

func (m *DockerVersion) GetOs() string {
	if m != nil {
		return m.Os
	}
	return ""
}

func (m *DockerVersion) GetArch() string {
	if m != nil {
		return m.Arch
	}
	return ""
}

type DockerInfo struct {
	Driver       string   `protobuf:"bytes,1,opt,name=Driver,json=driver" json:"Driver,omitempty"`
	DriverStatus []string `protobuf:"bytes,2,rep,name=DriverStatus,json=driverStatus" json:"DriverStatus,omitempty"`
}

func (m *DockerInfo) Reset()                    { *m = DockerInfo{} }
func (m *DockerInfo) String() string            { return proto.CompactTextString(m) }
func (*DockerInfo) ProtoMessage()               {}
func (*DockerInfo) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{5} }

func (m *DockerInfo) GetDriver() string {
	if m != nil {
		return m.Driver
	}
	return ""
}

func (m *DockerInfo) GetDriverStatus() []string {
	if m != nil {
		return m.DriverStatus
	}
	return nil
}

func init() {
	proto.RegisterType((*ContainerPath)(nil), "proto.ksync.ContainerPath")
	proto.RegisterType((*BasePath)(nil), "proto.ksync.BasePath")
	proto.RegisterType((*Error)(nil), "proto.ksync.Error")
	proto.RegisterType((*VersionInfo)(nil), "proto.ksync.VersionInfo")
	proto.RegisterType((*DockerVersion)(nil), "proto.ksync.DockerVersion")
	proto.RegisterType((*DockerInfo)(nil), "proto.ksync.DockerInfo")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for Radar service

type RadarClient interface {
	GetBasePath(ctx context.Context, in *ContainerPath, opts ...grpc.CallOption) (*BasePath, error)
	RestartSyncthing(ctx context.Context, in *google_protobuf.Empty, opts ...grpc.CallOption) (*Error, error)
	Restart(ctx context.Context, in *ContainerPath, opts ...grpc.CallOption) (*Error, error)
	GetVersionInfo(ctx context.Context, in *google_protobuf.Empty, opts ...grpc.CallOption) (*VersionInfo, error)
	GetDockerVersion(ctx context.Context, in *google_protobuf.Empty, opts ...grpc.CallOption) (*DockerVersion, error)
	GetDockerInfo(ctx context.Context, in *google_protobuf.Empty, opts ...grpc.CallOption) (*DockerInfo, error)
}

type radarClient struct {
	cc *grpc.ClientConn
}

func NewRadarClient(cc *grpc.ClientConn) RadarClient {
	return &radarClient{cc}
}

func (c *radarClient) GetBasePath(ctx context.Context, in *ContainerPath, opts ...grpc.CallOption) (*BasePath, error) {
	out := new(BasePath)
	err := grpc.Invoke(ctx, "/proto.ksync.Radar/GetBasePath", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *radarClient) RestartSyncthing(ctx context.Context, in *google_protobuf.Empty, opts ...grpc.CallOption) (*Error, error) {
	out := new(Error)
	err := grpc.Invoke(ctx, "/proto.ksync.Radar/RestartSyncthing", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *radarClient) Restart(ctx context.Context, in *ContainerPath, opts ...grpc.CallOption) (*Error, error) {
	out := new(Error)
	err := grpc.Invoke(ctx, "/proto.ksync.Radar/Restart", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *radarClient) GetVersionInfo(ctx context.Context, in *google_protobuf.Empty, opts ...grpc.CallOption) (*VersionInfo, error) {
	out := new(VersionInfo)
	err := grpc.Invoke(ctx, "/proto.ksync.Radar/GetVersionInfo", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *radarClient) GetDockerVersion(ctx context.Context, in *google_protobuf.Empty, opts ...grpc.CallOption) (*DockerVersion, error) {
	out := new(DockerVersion)
	err := grpc.Invoke(ctx, "/proto.ksync.Radar/GetDockerVersion", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *radarClient) GetDockerInfo(ctx context.Context, in *google_protobuf.Empty, opts ...grpc.CallOption) (*DockerInfo, error) {
	out := new(DockerInfo)
	err := grpc.Invoke(ctx, "/proto.ksync.Radar/GetDockerInfo", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Radar service

type RadarServer interface {
	GetBasePath(context.Context, *ContainerPath) (*BasePath, error)
	RestartSyncthing(context.Context, *google_protobuf.Empty) (*Error, error)
	Restart(context.Context, *ContainerPath) (*Error, error)
	GetVersionInfo(context.Context, *google_protobuf.Empty) (*VersionInfo, error)
	GetDockerVersion(context.Context, *google_protobuf.Empty) (*DockerVersion, error)
	GetDockerInfo(context.Context, *google_protobuf.Empty) (*DockerInfo, error)
}

func RegisterRadarServer(s *grpc.Server, srv RadarServer) {
	s.RegisterService(&_Radar_serviceDesc, srv)
}

func _Radar_GetBasePath_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ContainerPath)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RadarServer).GetBasePath(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.ksync.Radar/GetBasePath",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RadarServer).GetBasePath(ctx, req.(*ContainerPath))
	}
	return interceptor(ctx, in, info, handler)
}

func _Radar_RestartSyncthing_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(google_protobuf.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RadarServer).RestartSyncthing(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.ksync.Radar/RestartSyncthing",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RadarServer).RestartSyncthing(ctx, req.(*google_protobuf.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Radar_Restart_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ContainerPath)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RadarServer).Restart(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.ksync.Radar/Restart",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RadarServer).Restart(ctx, req.(*ContainerPath))
	}
	return interceptor(ctx, in, info, handler)
}

func _Radar_GetVersionInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(google_protobuf.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RadarServer).GetVersionInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.ksync.Radar/GetVersionInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RadarServer).GetVersionInfo(ctx, req.(*google_protobuf.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Radar_GetDockerVersion_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(google_protobuf.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RadarServer).GetDockerVersion(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.ksync.Radar/GetDockerVersion",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RadarServer).GetDockerVersion(ctx, req.(*google_protobuf.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Radar_GetDockerInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(google_protobuf.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RadarServer).GetDockerInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.ksync.Radar/GetDockerInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RadarServer).GetDockerInfo(ctx, req.(*google_protobuf.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

var _Radar_serviceDesc = grpc.ServiceDesc{
	ServiceName: "proto.ksync.Radar",
	HandlerType: (*RadarServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetBasePath",
			Handler:    _Radar_GetBasePath_Handler,
		},
		{
			MethodName: "RestartSyncthing",
			Handler:    _Radar_RestartSyncthing_Handler,
		},
		{
			MethodName: "Restart",
			Handler:    _Radar_Restart_Handler,
		},
		{
			MethodName: "GetVersionInfo",
			Handler:    _Radar_GetVersionInfo_Handler,
		},
		{
			MethodName: "GetDockerVersion",
			Handler:    _Radar_GetDockerVersion_Handler,
		},
		{
			MethodName: "GetDockerInfo",
			Handler:    _Radar_GetDockerInfo_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/radar.proto",
}

func init() { proto.RegisterFile("proto/radar.proto", fileDescriptor1) }

var fileDescriptor1 = []byte{
	// 476 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x7c, 0x52, 0xcb, 0x6e, 0xdb, 0x30,
	0x10, 0xf4, 0x53, 0xae, 0xd7, 0x56, 0xe0, 0x12, 0xa8, 0xcb, 0xba, 0x45, 0x90, 0x12, 0x3d, 0xe4,
	0x24, 0x03, 0xe9, 0xb1, 0x97, 0xc6, 0x71, 0xa0, 0xf8, 0x50, 0x34, 0x70, 0x8a, 0x5e, 0x0b, 0x5a,
	0xa2, 0x65, 0x22, 0x96, 0x18, 0x50, 0xeb, 0x00, 0xfe, 0x94, 0x5e, 0xfa, 0x4b, 0xfd, 0xa5, 0x40,
	0xa4, 0x64, 0x88, 0x41, 0x9c, 0x93, 0xb8, 0x33, 0x3b, 0xab, 0x59, 0x72, 0xe0, 0xed, 0x83, 0x56,
	0xa8, 0xa6, 0x9a, 0xc7, 0x5c, 0x07, 0xe6, 0x4c, 0x06, 0xe6, 0x13, 0xdc, 0xe7, 0xfb, 0x2c, 0x9a,
	0x7c, 0x4c, 0x94, 0x4a, 0xb6, 0x62, 0x6a, 0xb0, 0xd5, 0x6e, 0x3d, 0x15, 0xe9, 0x03, 0xee, 0x6d,
	0x27, 0xbb, 0x00, 0xff, 0x4a, 0x65, 0xc8, 0x65, 0x26, 0xf4, 0x2d, 0xc7, 0x0d, 0xf9, 0x0c, 0xc3,
	0xa8, 0x02, 0xfe, 0xc8, 0x98, 0x36, 0xcf, 0x9a, 0xe7, 0xfd, 0xe5, 0xe0, 0x80, 0x2d, 0x62, 0x76,
	0x0a, 0x6f, 0x66, 0x3c, 0x17, 0xa6, 0x9d, 0x40, 0x67, 0xbd, 0xdb, 0x6e, 0xcb, 0x36, 0x73, 0x66,
	0x1f, 0xa0, 0x7b, 0xad, 0xb5, 0xd2, 0x64, 0x04, 0xed, 0x34, 0x4f, 0x4a, 0xae, 0x38, 0xb2, 0xbf,
	0x4d, 0x18, 0xfc, 0x16, 0x3a, 0x97, 0x2a, 0x5b, 0x64, 0x6b, 0x45, 0x28, 0xf4, 0xca, 0xb2, 0xec,
	0xea, 0x3d, 0xda, 0x92, 0x7c, 0x82, 0x7e, 0xa8, 0x2a, 0xae, 0x65, 0xb8, 0x7e, 0x52, 0x01, 0x86,
	0x95, 0x78, 0xa5, 0xd2, 0x54, 0x22, 0x6d, 0x97, 0x6c, 0x05, 0x90, 0x31, 0x78, 0xa1, 0xc4, 0x5f,
	0x3c, 0xa1, 0x1d, 0x43, 0x79, 0x89, 0xa9, 0x0a, 0xd5, 0x6c, 0x27, 0xb7, 0xf1, 0x9c, 0xa3, 0xa0,
	0x5d, 0xab, 0x5a, 0x55, 0x00, 0xfb, 0xdf, 0x04, 0x7f, 0xae, 0xa2, 0x7b, 0xa1, 0xab, 0xbf, 0x1c,
	0x77, 0x77, 0x0a, 0x70, 0x79, 0xbb, 0x70, 0xed, 0x01, 0x3f, 0x20, 0xe4, 0x0b, 0xf8, 0x3f, 0x64,
	0x56, 0x6b, 0xb1, 0x1e, 0xfd, 0xb4, 0x0e, 0xba, 0x5b, 0x74, 0x9e, 0x6f, 0xe1, 0xdc, 0x40, 0xf7,
	0xf9, 0x0d, 0x9c, 0x40, 0xeb, 0x67, 0x4e, 0x3d, 0x03, 0xb7, 0x54, 0x5e, 0x3c, 0xc4, 0xa5, 0x8e,
	0x36, 0xb4, 0x67, 0x1f, 0x82, 0xeb, 0x68, 0xc3, 0x6e, 0x00, 0xec, 0x42, 0xe6, 0xae, 0xc7, 0xe0,
	0xcd, 0xb5, 0x7c, 0x14, 0xba, 0x5c, 0xc6, 0x8b, 0x4d, 0x45, 0x18, 0x0c, 0x2d, 0x7e, 0x87, 0x1c,
	0x77, 0x39, 0x6d, 0x9d, 0xb5, 0xcf, 0xfb, 0xcb, 0x61, 0x5c, 0xc3, 0x2e, 0xfe, 0xb5, 0xa1, 0xbb,
	0x2c, 0x02, 0x46, 0x66, 0x30, 0x08, 0x05, 0x1e, 0xde, 0x7f, 0x12, 0xd4, 0xa2, 0x16, 0x38, 0x51,
	0x9a, 0xbc, 0x73, 0xb8, 0x4a, 0xc2, 0x1a, 0xe4, 0x3b, 0x8c, 0x96, 0x22, 0x47, 0xae, 0xf1, 0x6e,
	0x9f, 0x45, 0xb8, 0x91, 0x59, 0x42, 0xc6, 0x81, 0x8d, 0x69, 0x50, 0xc5, 0x34, 0xb8, 0x2e, 0x62,
	0x3a, 0x21, 0xce, 0x10, 0x93, 0x2b, 0xd6, 0x20, 0xdf, 0xa0, 0x57, 0x4e, 0x78, 0xd5, 0xc1, 0xcb,
	0xe2, 0x39, 0x9c, 0x84, 0x02, 0xeb, 0x31, 0x3c, 0xf6, 0x73, 0xea, 0xe8, 0x6b, 0x0a, 0xd6, 0x20,
	0x37, 0x30, 0x0a, 0x05, 0xba, 0x81, 0x39, 0x36, 0xc7, 0xf5, 0xe8, 0x68, 0x58, 0x83, 0xcc, 0xc0,
	0x3f, 0x4c, 0x7a, 0xd5, 0xce, 0xfb, 0x17, 0xc6, 0x58, 0x37, 0x2b, 0xcf, 0x30, 0x5f, 0x9f, 0x02,
	0x00, 0x00, 0xff, 0xff, 0x7b, 0x8c, 0xeb, 0x60, 0x0d, 0x04, 0x00, 0x00,
}
