// Code generated by protoc-gen-go. DO NOT EDIT.
// source: proto/radar.proto

/*
Package proto_radar is a generated protocol buffer package.

It is generated from these files:
	proto/radar.proto

It has these top-level messages:
	ContainerPath
	BasePath
	Error
*/
package proto_radar

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import google_protobuf "github.com/golang/protobuf/ptypes/empty"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type ContainerPath struct {
	ContainerId string `protobuf:"bytes,1,opt,name=container_id,json=containerId" json:"container_id,omitempty"`
}

func (m *ContainerPath) Reset()                    { *m = ContainerPath{} }
func (m *ContainerPath) String() string            { return proto.CompactTextString(m) }
func (*ContainerPath) ProtoMessage()               {}
func (*ContainerPath) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *ContainerPath) GetContainerId() string {
	if m != nil {
		return m.ContainerId
	}
	return ""
}

type BasePath struct {
	Full string `protobuf:"bytes,1,opt,name=full" json:"full,omitempty"`
}

func (m *BasePath) Reset()                    { *m = BasePath{} }
func (m *BasePath) String() string            { return proto.CompactTextString(m) }
func (*BasePath) ProtoMessage()               {}
func (*BasePath) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *BasePath) GetFull() string {
	if m != nil {
		return m.Full
	}
	return ""
}

type Error struct {
	Msg string `protobuf:"bytes,1,opt,name=msg" json:"msg,omitempty"`
}

func (m *Error) Reset()                    { *m = Error{} }
func (m *Error) String() string            { return proto.CompactTextString(m) }
func (*Error) ProtoMessage()               {}
func (*Error) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *Error) GetMsg() string {
	if m != nil {
		return m.Msg
	}
	return ""
}

func init() {
	proto.RegisterType((*ContainerPath)(nil), "proto.radar.ContainerPath")
	proto.RegisterType((*BasePath)(nil), "proto.radar.BasePath")
	proto.RegisterType((*Error)(nil), "proto.radar.Error")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for Radar service

type RadarClient interface {
	GetBasePath(ctx context.Context, in *ContainerPath, opts ...grpc.CallOption) (*BasePath, error)
	RestartMirror(ctx context.Context, in *google_protobuf.Empty, opts ...grpc.CallOption) (*Error, error)
	Restart(ctx context.Context, in *ContainerPath, opts ...grpc.CallOption) (*Error, error)
}

type radarClient struct {
	cc *grpc.ClientConn
}

func NewRadarClient(cc *grpc.ClientConn) RadarClient {
	return &radarClient{cc}
}

func (c *radarClient) GetBasePath(ctx context.Context, in *ContainerPath, opts ...grpc.CallOption) (*BasePath, error) {
	out := new(BasePath)
	err := grpc.Invoke(ctx, "/proto.radar.Radar/GetBasePath", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *radarClient) RestartMirror(ctx context.Context, in *google_protobuf.Empty, opts ...grpc.CallOption) (*Error, error) {
	out := new(Error)
	err := grpc.Invoke(ctx, "/proto.radar.Radar/RestartMirror", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *radarClient) Restart(ctx context.Context, in *ContainerPath, opts ...grpc.CallOption) (*Error, error) {
	out := new(Error)
	err := grpc.Invoke(ctx, "/proto.radar.Radar/Restart", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Radar service

type RadarServer interface {
	GetBasePath(context.Context, *ContainerPath) (*BasePath, error)
	RestartMirror(context.Context, *google_protobuf.Empty) (*Error, error)
	Restart(context.Context, *ContainerPath) (*Error, error)
}

func RegisterRadarServer(s *grpc.Server, srv RadarServer) {
	s.RegisterService(&_Radar_serviceDesc, srv)
}

func _Radar_GetBasePath_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ContainerPath)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RadarServer).GetBasePath(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.radar.Radar/GetBasePath",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RadarServer).GetBasePath(ctx, req.(*ContainerPath))
	}
	return interceptor(ctx, in, info, handler)
}

func _Radar_RestartMirror_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(google_protobuf.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RadarServer).RestartMirror(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.radar.Radar/RestartMirror",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RadarServer).RestartMirror(ctx, req.(*google_protobuf.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Radar_Restart_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ContainerPath)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RadarServer).Restart(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.radar.Radar/Restart",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RadarServer).Restart(ctx, req.(*ContainerPath))
	}
	return interceptor(ctx, in, info, handler)
}

var _Radar_serviceDesc = grpc.ServiceDesc{
	ServiceName: "proto.radar.Radar",
	HandlerType: (*RadarServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetBasePath",
			Handler:    _Radar_GetBasePath_Handler,
		},
		{
			MethodName: "RestartMirror",
			Handler:    _Radar_RestartMirror_Handler,
		},
		{
			MethodName: "Restart",
			Handler:    _Radar_Restart_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/radar.proto",
}

func init() { proto.RegisterFile("proto/radar.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 231 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0x12, 0x2c, 0x28, 0xca, 0x2f,
	0xc9, 0xd7, 0x2f, 0x4a, 0x4c, 0x49, 0x2c, 0xd2, 0x03, 0xb3, 0x85, 0xb8, 0xc1, 0x94, 0x1e, 0x58,
	0x48, 0x4a, 0x3a, 0x3d, 0x3f, 0x3f, 0x3d, 0x27, 0x55, 0x1f, 0x2c, 0x96, 0x54, 0x9a, 0xa6, 0x9f,
	0x9a, 0x5b, 0x50, 0x52, 0x09, 0x51, 0xa9, 0x64, 0xc4, 0xc5, 0xeb, 0x9c, 0x9f, 0x57, 0x92, 0x98,
	0x99, 0x97, 0x5a, 0x14, 0x90, 0x58, 0x92, 0x21, 0xa4, 0xc8, 0xc5, 0x93, 0x0c, 0x13, 0x88, 0xcf,
	0x4c, 0x91, 0x60, 0x54, 0x60, 0xd4, 0xe0, 0x0c, 0xe2, 0x86, 0x8b, 0x79, 0xa6, 0x28, 0xc9, 0x71,
	0x71, 0x38, 0x25, 0x16, 0xa7, 0x82, 0x95, 0x0b, 0x71, 0xb1, 0xa4, 0x95, 0xe6, 0xe4, 0x40, 0x95,
	0x81, 0xd9, 0x4a, 0x92, 0x5c, 0xac, 0xae, 0x45, 0x45, 0xf9, 0x45, 0x42, 0x02, 0x5c, 0xcc, 0xb9,
	0xc5, 0xe9, 0x50, 0x39, 0x10, 0xd3, 0xe8, 0x38, 0x23, 0x17, 0x6b, 0x10, 0xc8, 0x55, 0x42, 0x4e,
	0x5c, 0xdc, 0xee, 0xa9, 0x25, 0x70, 0x73, 0xa4, 0xf4, 0x90, 0x9c, 0xac, 0x87, 0xe2, 0x24, 0x29,
	0x51, 0x14, 0x39, 0x98, 0x16, 0x25, 0x06, 0x21, 0x5b, 0x2e, 0xde, 0xa0, 0xd4, 0xe2, 0x92, 0xc4,
	0xa2, 0x12, 0xdf, 0x4c, 0xb0, 0x85, 0x62, 0x7a, 0x10, 0xbf, 0xea, 0xc1, 0xfc, 0xaa, 0xe7, 0x0a,
	0xf2, 0xab, 0x94, 0x10, 0x8a, 0x09, 0x60, 0xc7, 0x29, 0x31, 0x08, 0x59, 0x73, 0xb1, 0x43, 0xb5,
	0xe3, 0xb5, 0x1e, 0xab, 0xe6, 0x24, 0x36, 0xb0, 0xa0, 0x31, 0x20, 0x00, 0x00, 0xff, 0xff, 0xc2,
	0x37, 0x46, 0x95, 0x7e, 0x01, 0x00, 0x00,
}
